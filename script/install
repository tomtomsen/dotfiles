#!/usr/bin/env bash
#
# Run all dotfiles installers.

set -e

cd "$(dirname $0)"/..
DOTFILES_ROOT=$(pwd -P)

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[00;34m'
NC='\033[0m'
echo ''

info () {
  printf "\r${BLUE}-${NC} $1\n"
}

user () {
  printf "\r${YELLOW}?${NC} $1\n"
}

success () {
  printf "\r${GREEN}\xE2\x9C\x93${NC} $1\n"
}

fail () {
  printf "\r${RED}!${NC} $1\n"
  echo ''
  exit
}

output() {
    echo -e "$@"
}

elevate() {
    if [[ $EUID -ne 0 ]]; then
        sudo "$@"
    else
        "$@"
    fi
}

remove_duplicates() {
    echo "$1" | tr ' ' '\n' | sort -u | tr '\n' ' '
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: ${GREEN}$dst${NC} ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      echo rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      echo mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $GREEN$src$NC"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    echo ln -s "$1" "$2"
    success "linked $GREEN$1$NC to $GREEN$2$NC"
  fi
}

install_packages() {
    # Find all files named pacman.dependencies in subdirectories
    files=$(find . -type f -name "pacman.dependencies")

    # Extract contents of each file and append to list
    deps=()
    info Processing dependencies...
    for file in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name 'pacman.dependencies' -not -path '*.git*')
    do
        output "\r   ${GREEN}$file${NC}"
        deps+=( $(grep -v -e '^#' -e '^$' $file) )
    done
    output ""

    # Remove duplicate entries from list
    deps=( $(echo "${deps[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )

    # Install packages using pacman
    output "Installing packages: ${GREEN}${deps[@]}${NC}"
    echo ''
    # elevate pacman -Sy ${deps[@]}

    # Find all files named *.sym in subdirectories
    files=$(find . -type f -name "*.sym")
}

install_dotfiles () {
  info 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.sym' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_packages
install_dotfiles