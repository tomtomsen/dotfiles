#!/usr/bin/env bash
#
# Run all dotfiles installers.

set -e

cd "$(dirname $0)"/..
DOTFILES_ROOT=$(pwd -P)

PACKAGES=(
  "bat"
  "bat-extras"
  "git"

  # terminal emulator
  "foot"

  # shell
  "bash" 
  "zsh"
  "starship"

  # notifier
  "dunst"
  "mako"
)

YAY_PACKAGES=(
  "flavours"
)

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[00;34m'
NC='\033[0m'
echo ''

info () {
  printf "\r${BLUE}-${NC} $1\n"
}

user () {
  printf "\r${YELLOW}?${NC} $1\n"
}

success () {
  printf "\r${GREEN}\xE2\x9C\x93${NC} $1\n"
}

fail () {
  printf "\r${RED}!${NC} $1\n"
  echo ''
  exit
}

output() {
    echo -e "$@"
}

parse_options() {
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            -n|--dry-run)
                DRY_RUN=1
                shift
                ;;
            *)
                echo "Unknown option: ${key}"
                exit 1
                ;;
        esac
    done
}

elevate() {
    if [[ $EUID -ne 0 ]]; then
        sudo "$@"
    else
        "$@"
    fi
}

remove_duplicates() {
    echo "$1" | tr ' ' '\n' | sort -u | tr '\n' ' '
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: ${GREEN}$dst${NC} ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
        if [[ -n ${DRY_RUN} ]]; then
            info "${BLUE}Dry-run${NC}: rm -rf $GREEN\"$dst\"$NC"
        else
            rm -rf "$dst"
        fi

      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
        if [[ -n ${DRY_RUN} ]]; then
            info "${BLUE}Dry-run${NC}: mv ${GREEN}\"$dst\"${NC} ${GREEN}\"${dst}.backup\"${NC}"
        else
            mv "$dst" "${dst}.backup"
        fi
      success "moved ${GREEN}$dst${NC} to ${GREEN}${dst}.backup${NC}"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped ${GREEN}$src${NC}"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    parent=$(dirname "$2")
    if [ ! -d "$parent" ]
    then
      mkdir -p "$parent"
    fi

    if [[ -n ${DRY_RUN} ]]; then
        info "${BLUE}Dry-run${NC}: ln -s ${GREEN}\"$1\"${NC} ${GREEN}\"$2\"${NC}"
    else
        ln -s "$1" "$2"
    fi
    success "linked ${GREEN}$1${NC} to ${GREEN}$2${NC}"
  fi
}

install_packages() {
    # Install packages using pacman
    output "Installing packages: ${GREEN}${PACKAGES[@]}${NC}"
    echo ''

    if [[ -n ${DRY_RUN} ]]; then
        info "${BLUE}Dry-run${NC}: elevate pacman -Sy ${PACKAGES[@]}"
    else
        elevate pacman --sync --refresh --needed ${PACKAGES[@]}
    fi
    echo ''
}

install_yay_packages() {
    # Install packages using yay
    output "Installing packages: ${GREEN}${YAY_PACKAGES[@]}${NC}"
    echo ''

    if [[ -n ${DRY_RUN} ]]; then
        info "${BLUE}Dry-run${NC}: elevate yay -Sy ${YAY_PACKAGES[@]}"
    else
        elevate yay --sync --refresh --needed ${YAY_PACKAGES[@]}
    fi
    echo ''
}

install_dotfiles () {
  info 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.sym' -not -path '*.git*')
  do
    dst=$(basename "${src%.*}")
    dst="$HOME/.${dst//+//}"
    link_file "$src" "$dst"
  done
}

post_install() {
  info 'Post install'

  info 'update flavours'
  flavours update all
}

parse_options "$@"
install_packages
install_yay_packages
install_dotfiles
post_install
